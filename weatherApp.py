import sysfrom PyQt5 import QtWidgets, uicfrom util.helpers import getCityWeather, getDayclass weatherApp(QtWidgets.QMainWindow):    def __init__(self):        # initialize fixed sized weatherApp instance        super(weatherApp, self).__init__()        uic.loadUi('forms/mainWindow.ui', self).setFixedSize(800, 600)        # display correct days        self.labelToday.setText(getDay())        self.labelTomorrow.setText(getDay(daysFromNow=1))        self.labelDayAfter.setText(getDay(daysFromNow=2))        # call onClick function on button click        self.city = ''        self.submitCity.clicked.connect(self.onClick)    def onClick(self):        # get weather report for given city        self.city = self.inputCity.text()        currentWeatherReport = getCityWeather(self.city)        # 'invalid input' handling        if currentWeatherReport is None:            QtWidgets.QMessageBox.about(self, "Can't reach weather report", "Please try again")        else:            # update window title with city name            self.setWindowTitle("weatherApp - " + self.city)            # display label with current city temperature, weather description            self.cityTemp.setText(str(round(currentWeatherReport["main"]["temp"] - 273.15, 1)) + "℃")            self.weatherDescription.setText(currentWeatherReport["weather"][0]["description"])            # display today's forecast            forecastTemp = str(round(currentWeatherReport["main"]["temp_min"] - 273.15, 1)) + "℃" + " / "\                         + str(round(currentWeatherReport["main"]["temp_max"] - 273.15, 1)) + "℃"            self.todaysForecastTemp.setText(forecastTemp)            self.todaysForecastDesc.setText(currentWeatherReport["weather"][0]["main"])            forecastWeatherReport = getCityWeather(self.city, forecast=True)            # display tomorrow's forecast            forecastTemp = str(round(forecastWeatherReport["list"][8]["main"]["temp_min"] - 273.15, 1)) + "℃" + " / " \                           + str(round(forecastWeatherReport["list"][8]["main"]["temp_max"] - 273.15, 1)) + "℃"            self.tomoForecastTemp.setText(forecastTemp)            self.tomoForecastDesc.setText(forecastWeatherReport["list"][8]["weather"][0]["main"])            # display day after tomorrow's forecast            forecastTemp = str(round(forecastWeatherReport["list"][16]["main"]["temp_min"] - 273.15, 1)) + "℃" + " / " \                           + str(round(forecastWeatherReport["list"][16]["main"]["temp_max"] - 273.15, 1)) + "℃"            self.dayAftersForecastTemp.setText(forecastTemp)            self.dayAftersForecastDesc.setText(forecastWeatherReport["list"][16]["weather"][0]["main"])def main():    app = QtWidgets.QApplication([])    weatherAppWindow = weatherApp()    weatherAppWindow.show()    sys.exit(app.exec())if __name__ == '__main__':    main()